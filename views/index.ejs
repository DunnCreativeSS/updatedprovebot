<head>
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <script>
        (adsbygoogle = window.adsbygoogle || []).push({
            google_ad_client: "ca-pub-8504034781433425",
            enable_page_level_ads: true
        });
    </script>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-120452160-1"></script>
    <script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
            dataLayer.push(arguments);
        }
        gtag('js', new Date());

        gtag('config', 'UA-120452160-1');
    </script>

</head>
<script src="https://code.jquery.com/jquery-1.9.1.js"></script>
<script src="https://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

<!-- Resources -->
<script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
<script src="https://www.amcharts.com/lib/3/serial.js"></script>
<script src="https://www.amcharts.com/lib/3/plugins/dataloader/dataloader.min.js"></script>
<script src="https://www.amcharts.com/lib/3/plugins/export/export.min.js"></script>
<link rel="stylesheet" href="https://www.amcharts.com/lib/3/plugins/export/export.css" type="text/css" media="all" />
<script src="https://www.amcharts.com/lib/3/themes/light.js"></script>
<style>
    #chartdiv {
        width: 100%;
        height: 500px;
    }
</style>
<!-- Chart code -->
<script>
    /**
     * This demo uses direct URL to Poloniex exchance, which means that depending on your browser settings,
     * it may not work dure to CORS restrictions.
     * Please consult Poloniex API for further information:
     * https://poloniex.com/support/api/
     */

    var chart = AmCharts.makeChart("chartdiv", {
        "type": "serial",
        "theme": "light",
        "dataLoader": {
            "url": "https://poloniex.com/public?command=returnOrderBook&currencyPair=BTC_ETH&depth=50",
            "format": "json",
            "reload": 30,
            "postProcess": function(data) {
                data = <%- JSON.stringify(json) %>
                // Function to process (sort and calculate cummulative volume)
                function processData(list, type, desc) {

                    // Convert to data points
                    for (var i = 0; i < list.length; i++) {
                        list[i] = {
                            value: Number(list[i][0]),
                            volume: Number(list[i][1]),
                        }
                    }

                    // Sort list just in case
                    list.sort(function(a, b) {
                        if (a.value > b.value) {
                            return 1;
                        } else if (a.value < b.value) {
                            return -1;
                        } else {
                            return 0;
                        }
                    });

                    // Calculate cummulative volume
                    if (desc) {
                        for (var i = list.length - 1; i >= 0; i--) {
                            if (i < (list.length - 1)) {
                                list[i].totalvolume = list[i + 1].totalvolume + list[i].volume;
                            } else {
                                list[i].totalvolume = list[i].volume;
                            }
                            var dp = {};
                            dp["value"] = list[i].value;
                            dp[type + "volume"] = list[i].volume;
                            dp[type + "totalvolume"] = list[i].totalvolume;
                            res.unshift(dp);
                        }
                    } else {
                        for (var i = 0; i < list.length; i++) {
                            if (i > 0) {
                                list[i].totalvolume = list[i - 1].totalvolume + list[i].volume;
                            } else {
                                list[i].totalvolume = list[i].volume;
                            }
                            var dp = {};
                            dp["value"] = list[i].value;
                            dp[type + "volume"] = list[i].volume;
                            dp[type + "totalvolume"] = list[i].totalvolume;
                            res.push(dp);
                        }
                    }

                }

                // Init
                var res = [];
                processData(data.bids, "bids", true);
                processData(data.asks, "asks", false);

                //console.log(res);
                return res;
            }
        },
        "graphs": [{
            "id": "bids",
            "fillAlphas": 0.1,
            "lineAlpha": 1,
            "lineThickness": 2,
            "lineColor": "#0f0",
            "type": "step",
            "valueField": "bidstotalvolume",
            "balloonFunction": balloon
        }, {
            "id": "asks",
            "fillAlphas": 0.1,
            "lineAlpha": 1,
            "lineThickness": 2,
            "lineColor": "#f00",
            "type": "step",
            "valueField": "askstotalvolume",
            "balloonFunction": balloon
        }, {
            "lineAlpha": 0,
            "fillAlphas": 0.2,
            "lineColor": "#000",
            "type": "column",
            "clustered": false,
            "valueField": "bidsvolume",
            "showBalloon": false
        }, {
            "lineAlpha": 0,
            "fillAlphas": 0.2,
            "lineColor": "#000",
            "type": "column",
            "clustered": false,
            "valueField": "asksvolume",
            "showBalloon": false
        }],
        "categoryField": "value",
        "chartCursor": {},
        "balloon": {
            "textAlign": "left"
        },
        "valueAxes": [{
            "title": "Volume"
        }],
        "categoryAxis": {
            "title": "<%- name %>",
            "minHorizontalGap": 100,
            "startOnAxis": true,
            "showFirstLabel": false,
            "showLastLabel": false
        },
        "export": {
            "enabled": true
        }
    });

    function balloon(item, graph) {
        var txt;
        if (graph.id == "asks") {
            txt = "Ask: <strong>" + formatNumber(item.dataContext.value, graph.chart, 4) + "</strong><br />" +
                "Total volume: <strong>" + formatNumber(item.dataContext.askstotalvolume, graph.chart, 4) + "</strong><br />" +
                "Volume: <strong>" + formatNumber(item.dataContext.asksvolume, graph.chart, 4) + "</strong>";
        } else {
            txt = "Bid: <strong>" + formatNumber(item.dataContext.value, graph.chart, 4) + "</strong><br />" +
                "Total volume: <strong>" + formatNumber(item.dataContext.bidstotalvolume, graph.chart, 4) + "</strong><br />" +
                "Volume: <strong>" + formatNumber(item.dataContext.bidsvolume, graph.chart, 4) + "</strong>";
        }
        return txt;
    }

    function formatNumber(val, chart, precision) {
        return AmCharts.formatNumber(
            val, {
                precision: precision ? precision : chart.precision,
                decimalSeparator: chart.decimalSeparator,
                thousandsSeparator: chart.thousandsSeparator
            }
        );
    }
</script>

<script src="https://code.highcharts.com/stock/highstock.js"></script>
<script src="https://code.highcharts.com/stock/modules/exporting.js"></script>
<script src="https://code.highcharts.com/stock/modules/export-data.js"></script>
<div id="msg"></div>
<div id='tradeHistory'></div>
The goal of this bot isn't to profit: it's to show off that there would be profits if we eliminated the 0.1% trading fee, or effect a market maker rebate of -0.01% or up to -0.1%. Imagine this chart as you're watching it without the steep climbs after some of the green (buying) lines: those drops are fees. Imagine it with bigger falls on some of the red (selling) lines: sales without fees. <a href="https://medium.com/@jarettrsdunn/binance-hitbtc-etc-market-maker-pitch-how-to-get-rich-online-2988c1d328ac">Read More Here.</a> <br> <br> # current orders: <div id = 'numOrders'></div> Buy orders: <div id = 'buyOrders'></div> Sell orders: <div id = 'sellOrders'></div>  <br> # recent trades: <div id = 'numTrades'></div><br>All balances: <div id = "balances"></div><br>Oldest trade in recent memory: <div id = 'least'></div> and btcVol in recent memory: <div id='btcVol'></div><br>Hours since oldest trade: <div id ='hours'></div><br>Est. daily vol: <div id="dailyvol"></div><br><br>Est. 1 BTC invested: <div id="1btc"></div>Est. 5 BTC invested: <div id="5btc"></div>Est. 10 BTC invested: <div id="10btc"></div>Est. 20 BTC invested: <div id="20btc"></div><br>Minutely Sharpe vs. hold BTC: <div id="sharpe"></div><br><br>sharpe and green line on chart, along with total usd eth btc are adjusted for 0.0% fees in recent memory.<br>

<div id="container0" style="height: 500px; min-width: 310px"></div>
<div id="container" style="height: 500px; min-width: 310px"></div>
<div id="container3" style="height: 500px; min-width: 310px"></div>
<div id="container2" style="height: 500px; min-width: 310px"></div><!--
<div id="chartdiv" style="height: 400px; min-width: 310px"></div>-->

<script>

    var prices = [];
    var rois = [];
	var lasks = [];
    $(document).ready(function() {
        console.log("ready!");
		var total = []
        var eth = []
        var btc = []
        var diffavg3 = []
        var diffusd = []
        var diffeth = []
        var diffbtc = []
        var diffavg = []
        var refdiff = []
        setInterval(function() {
            //chart = Highcharts.stockChart('container', options);
            $.getJSON('http://techvoices.club/update?name=2', function(jsondata) {
              $('#msg').html(jsondata.msg)
            $('#numOrders').html(jsondata.orders);
            $('#numTrades').html(jsondata.trades)
            $('#balances').html('');
            $('#btcVol').html(jsondata.btcVol)
            for (var b in jsondata.balances){
            $('#balances').append('<br>' + b + ": free: " + jsondata.balances[b] + " on orders: " + jsondata.balances2[b])
            }
            $('#balances').append('<br><br>State of all pairs:')
            for (var b in jsondata.stops){
             $('#balances').append('<br>' + b + ': bid avg: ' + jsondata.bids[b] + ' stop: ' + jsondata.stops[b] + ' bought at (times fees, less divisor): ' + jsondata.buyOs[b] + ' divisor: ' + jsondata.divisor[b])
            }
            $('#balances').append('<br>')
            $('#least').html(new Date(jsondata.least))
            $('#buyOrders').html(jsondata.buyOrders)
            $('#sellOrders').html(jsondata.sellOrders)
                console.log(jsondata);
				console.log(new Date().getTime());
				var d2 = new Date().getTime();
				total.push([d2, jsondata.total]);
                btc.push([d2, jsondata.btc])
                eth.push([d2, jsondata.eth])
                diffusd.push([d2, jsondata.usddiff2])
                diffeth.push([d2, jsondata.ethdiff2])
                diffbtc.push([d2, jsondata.btcdiff2])
let diffs = [jsondata.usddiff2, jsondata.ethdiff2, jsondata.btcdiff2]
let lll = -99999
for (var d in diffs){
if (diffs[d] > lll){
lll = diffs[d]

}
}
let diffs2 = [jsondata.usddiff, jsondata.ethdiff, jsondata.btcdiff]
let lll2 = -99999
for (var d in diffs2){
if (diffs2[d] > lll2){
lll2 = diffs2[d]

}
}
                refdiff.push([d2, jsondata.refdiff2])
                chart2.series[0].setData(btc);
                chart3.series[0].setData(eth);
				chart.series[0].setData(total);
                //chart0.series[0].setData(diffusd);
                //chart0.series[1].setData(diffeth);
                //chart0.series[2].setData(diffbtc);
                //chart0.series[4].setData(refdiff);
                let avg2 = (jsondata.usddiff2 + jsondata.ethdiff2 + jsondata.btcdiff2) / 3
                diffavg.push([d2, lll])
                chart0.series[0].setData(diffavg);
                let avg3 = (jsondata.usddiff + jsondata.ethdiff + jsondata.btcdiff) / 3
                diffavg3.push([d2, lll2])
                chart0.series[1].setData(diffavg3);
                console.log('trade')
                let max = 99999999999999999999999999999;
                                for (var p in jsondata.trades2){
if (jsondata.trades2[p].time < max){
    max = jsondata.trades2[p].time
}

}
            $('#least').html(new Date(max))

            $('#hours').html((new Date().getTime() - max) / 1000 / 60 / 60)
	    let hours = (new Date().getTime() - max) / 1000 / 60 / 60
console.log(hours)
let div = 24 / hours
console.log('div:' + div)
console.log('btcvol: ' +jsondata.btcVol)
	    let dailyvol = div * jsondata.btcVol
console.log('dailyvol: ' + dailyvol)
$('#dailyvol').html(dailyvol)
$('#sharpe').html(jsondata.sharpe)

let a = jsondata.btc / 0.01
console.log('a: ' + a)
            let b2 = dailyvol / a
console.log('b2: ' + b2)
            let c = b2 / 0.01 / 1
            console.log('c: '  + c)
            console.log('lll2: ' + lll2)
            let dd = lll2 * (24 / hours)
            dd = -1* dd
	dd = dd / 100
 	dd = dd + 1
d = 1

console.log(c)
            $('#1btc').html('daily vol: ' + c + ' 30 day vol: ' + (c * 30) + ' days til 0% fees: ' + (1500 / c) + ' dd: ' + (dd) + ' exp. drawdown til 0%: ' + Math.pow(dd, 1500 / c) + ' daily fees @ 0.1%: <span style="color:red;">' + (c * 0.001) + '</span> income @ 0.1%: <span style="color:red;">' + (d / dd - d) + '</span> income @ 0.0%: ' + ((c * 0.001) + ((d / dd - d))) + ' income @ 0.1% rebate:  <span style="color:green;">' + (((c * 0.001) + (((c * 0.001) + ((d / dd - d)))))) + '</span>')
            c = c * 5
d = d * 5
console.log(c)
             $('#5btc').html('daily vol: ' + c + ' 30 day vol: ' + (c * 30) + ' days til 0% fees: ' + (1500 / c) + ' dd: ' + (dd) + ' exp. drawdown til 0%: ' + Math.pow(dd, 1500 / c) + ' daily fees @ 0.1%: <span style="color:red;">' + (c * 0.001) + '</span> income @ 0.1%: <span style="color:red;">' + (d / dd - d) + '</span> income @ 0.0%: ' + ((c * 0.001) + ((d / dd - d))) + ' income @ 0.1% rebate:  <span style="color:green;">' + (((c * 0.001) + (((c * 0.001) + ((d / dd - d))))))+ '</span>')
console.log(c)
c = c * 2
d = d * 2
              $('#10btc').html('daily vol: ' + c + ' 30 day vol: ' + (c * 30) + ' days til 0% fees: ' + (1500 / c) + ' dd: ' + (dd) + ' exp. drawdown til 0%: ' + Math.pow(dd, 1500 / c) + ' daily fees @ 0.1%: <span style="color:red;">' + (c * 0.001) + '</span> income @ 0.1%: <span style="color:red;">' + (d / dd - d) + '</span> income @ 0.0%: ' + ((c * 0.001) + ((d / dd - d))) + ' income @ 0.1% rebate:  <span style="color:green;">' + (((c * 0.001) + (((c * 0.001) + ((d / dd - d)))))) + '</span>')
  c = c * 2
             d = 20
              $('#20btc').html('daily vol: ' + c + ' 30 day vol: ' + (c * 30) + ' days til 0% fees: ' + (1500 / c) + ' dd: ' + (dd) + ' exp. drawdown til 0%: ' + Math.pow(dd, 1500 / c) + ' daily fees @ 0.1%: <span style="color:red;">' + (c * 0.001) + '</span> income @ 0.1%: <span style="color:red;">' + (d / dd - d) + '</span> income @ 0.0%: ' + ((c * 0.001) + ((d / dd - d))) + ' income @ 0.1% rebate: <span style="color:green;">' + (((c * 0.001) + (((c * 0.001) + ((d / dd - d))))))+ '</span>')
console.log(max )
                for (var p in jsondata.trades2){
                    if (jsondata.trades2[p].isBuyer == 'buy'){
                    let new_line = {
                        color: '#00FF00', // Red
                        width: 2,
                        label: jsondata.trades2[p].symbol + ': ' + jsondata.trades2[p].price,
                        value: parseFloat(jsondata.trades2[p].time)  // Position, you'll have to translate this to the values on your x axis
                    }
                    chart.xAxis[0].addPlotLine(new_line)
                    chart0.xAxis[0].addPlotLine(new_line)
                    chart2.xAxis[0].addPlotLine(new_line)
                    chart3.xAxis[0].addPlotLine(new_line)
                    }
                    else {
                    let new_line = {
                        color: '#FF0000', // Red
                        width: 2,
                        label: jsondata.trades2[p].symbol + ': ' + jsondata.trades2[p].price,
                        value: parseFloat(jsondata.trades2[p].time)  // Position, you'll have to translate this to the values on your x axis
                    }
                    chart.xAxis[0].addPlotLine(new_line)
                    chart0.xAxis[0].addPlotLine(new_line)
                    chart2.xAxis[0].addPlotLine(new_line)
                    chart3.xAxis[0].addPlotLine(new_line)
                    }
                }
               // chart = Highcharts.stockChart('container', options);
            });
        }, 5000);
    });

    var trade = [],
        vol = [],
        i = 0;

    i = 0;

    i = 0;
    var data = <%- JSON.stringify(trades) %>;
    for (i; i < <%- JSON.stringify(trades) %>.length; i += 1) {
        trade.push([
            data[i][2], // the date
            data[i][1]
        ]);

        vol.push([
            data[i][2], // the date
            data[i][0] // the volume
        ]);
    }

    var options = {



        rangeSelector: {
            buttons: [{
                count: 1,
                type: 'minute',
                text: '1m'
            }, {
                count: 5,
                type: 'minute',
                text: '5m'
            }, {
                count: 10,
                type: 'minute',
                text: '10m'
            }, {
                count: 30,
                type: 'minute',
                text: '30m'
            }, {
                count: 1,
                type: 'hour',
                text: '1h'
            }, {
                type: 'all',
                text: 'All'
            }],
            inputEnabled: false,
            selected: 0
        },


        title: {
            text: '<%- name %>'
        },
        xAxis: [{min: 1553152242903,
        plotLines: [{}]
        }],

        yAxis: [{
            labels: {
                align: 'right',
                x: -3
            },
            title: {
                text: 'Price'
            },
            height: '60%',
            lineWidth: 2,
            resize: {
                enabled: true
            }
        }, {
            labels: {
                align: 'right',
                x: -3
            },
            title: {
                text: 'Volume'
            },
            top: '65%',
            height: '35%',
            offset: 0,
            lineWidth: 2
        }],

        tooltip: {
            split: true
        },
        series: [{
                name: 'usd total',
                data: trade,
                color: '#00FF00'
            }
        ]
    }
			

    var options2 = {



        rangeSelector: {
            buttons: [{
                count: 1,
                type: 'minute',
                text: '1m'
            }, {
                count: 5,
                type: 'minute',
                text: '5m'
            }, {
                count: 10,
                type: 'minute',
                text: '10m'
            }, {
                count: 30,
                type: 'minute',
                text: '30m'
            }, {
                count: 1,
                type: 'hour',
                text: '1h'
            }, {
                type: 'all',
                text: 'All'
            }],
            inputEnabled: false,
            selected: 0
        },


        title: {
            text: '<%- name %>'
        },
        xAxis: [{min: 1553152242903,
        plotLines: [{}]
        }],


        yAxis: [{
            labels: {
                align: 'right',
                x: -3
            },
            title: {
                text: 'Price'
            },
            height: '60%',
            lineWidth: 2,
            resize: {
                enabled: true
            }
        }, {
            labels: {
                align: 'right',
                x: -3
            },
            title: {
                text: 'Volume'
            },
            top: '65%',
            height: '35%',
            offset: 0,
            lineWidth: 2
        }],

        tooltip: {
            split: true
        },
        series: [{
                name: 'btc total',
                data: trade,
                color: '#00FF00'
            }
        ]
    }


    var options0 = {



        rangeSelector: {
            buttons: [{
                count: 1,
                type: 'minute',
                text: '1m'
            }, {
                count: 5,
                type: 'minute',
                text: '5m'
            }, {
                count: 10,
                type: 'minute',
                text: '10m'
            }, {
                count: 30,
                type: 'minute',
                text: '30m'
            }, {
                count: 1,
                type: 'hour',
                text: '1h'
            }, {
                type: 'all',
                text: 'All'
            }],
            inputEnabled: false,
            selected: 0
        },


        title: {
            text: '<%- name %>'
        },
        xAxis: [{min: 1553152242903,
        plotLines: [{}]
        }],


        yAxis: [{
            labels: {
                align: 'right',
                x: -3
            },
            title: {
                text: 'Price'
            },
            height: '60%',
            lineWidth: 2,
            resize: {
                enabled: true
            }
        }, {
            labels: {
                align: 'right',
                x: -3
            },
            title: {
                text: 'Volume'
            },
            top: '65%',
            height: '35%',
            offset: 0,
            lineWidth: 2
        }],

        tooltip: {
            split: true
        },
        series: [{
                name: 'adjusted pnl',
                data: trade,
                color: '#00FF00'
            }, {
                name: 'unadjusted pnl',
                data: trade,
                color: '#FF0000'
            }, {
                name: 'btc pnl',
                data: trade,
                color: '#0000FF'
            }, {
                name: 'avg pnl',
                data: trade,
                color: '#000000',
                lineWidth: 2
            }, {
                name: 'reference btc diff',
                data: trade,
                color: '#000F0F',
                lineWidth: 2
            }
        ]
    }



    var options3 = {



        rangeSelector: {
            buttons: [{
                count: 1,
                type: 'minute',
                text: '1m'
            }, {
                count: 5,
                type: 'minute',
                text: '5m'
            }, {
                count: 10,
                type: 'minute',
                text: '10m'
            }, {
                count: 30,
                type: 'minute',
                text: '30m'
            }, {
                count: 1,
                type: 'hour',
                text: '1h'
            }, {
                type: 'all',
                text: 'All'
            }],
            inputEnabled: false,
            selected: 0
        },


        title: {
            text: '<%- name %>'
        },
        xAxis: [{min: 1553152242903,
        plotLines: [{}]
        }],


        yAxis: [{
            labels: {
                align: 'right',
                x: -3
            },
            title: {
                text: 'Price'
            },
            height: '60%',
            lineWidth: 2,
            resize: {
                enabled: true
            }
        }, {
            labels: {
                align: 'right',
                x: -3
            },
            title: {
                text: 'Volume'
            },
            top: '65%',
            height: '35%',
            offset: 0,
            lineWidth: 2
        }],

        tooltip: {
            split: true
        },
        series: [{
                name: 'eth total',
                data: trade,
                color: '#00FF00'
            }
        ]
    }

console.log(prices);
console.log(trade);

            var chart0 = Highcharts.stockChart('container0', options0);
            var chart = Highcharts.stockChart('container', options);
            var chart2 = Highcharts.stockChart('container2', options2);
            var chart3 = Highcharts.stockChart('container3', options3);
</script>
<%- msg %>
